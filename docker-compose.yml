nginx:
    # tell Docker Compose not to use an existing image but to use the Dockerfile 
    # from nginx/ to build a new image
    build: ./nginx/ 
    ports: # expose port to hose
        - 80:80
    links:
        - php    # We are telling Docker Compose that the nginx container needs a link to the php one
    volumes_from:
        # we are telling Docker Compose to mount the volumes from app in both these containers
        - app

php:
    build: ./php/
    expose: # expose port to other containers only
        - 9000
    links:
        - mysql
    volumes_from:
        # we are telling Docker Compose to mount the volumes from app in both these containers
        - app

mysql:
    image: mysql:latest
    volumes_from:
        - data
    environment:
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: project
        MYSQL_USER: project
        MYSQL_PASSWORD: project

# Let Docker Compose mount a directory of its choice from the host machine into /var/lib/mysql
data:
    image: mysql:latest
    volumes:
        - /var/lib/mysql
    command: "true"

# The purpose of this container is solely to hold the application code
app:
    image: php:7.0-fpm
    volumes:
      # . (current directory) must be mounted inside the container as its /var/www/html directory. 
      # To simplify, it means that the content of the current directory on our 
      # host machine will be in sync with the container's. It also means that this 
      # content will be persistent even if we destroy the container
        - .:/var/www/html
    command: "true"